Auther: saarloos <9090-90-90-9090@163.com>

    compilation issue fixing


diff -uprN lwip_old/src/api/sockets.c lwip/src/api/sockets.c
--- lwip_old/src/api/sockets.c	2021-11-10 19:25:04.000000000 +0800
+++ lwip/src/api/sockets.c	2024-01-22 10:34:37.272614301 +0800
@@ -1038,7 +1038,7 @@ lwip_sock_make_addr(struct netconn *conn
     IP_SET_TYPE(fromaddr, IPADDR_TYPE_V6);
   }
 #endif /* LWIP_IPV4 && LWIP_IPV6 */
-
+  DF_NADDR(*fromaddr);
   IPADDR_PORT_TO_SOCKADDR(&saddr, fromaddr, port);
   if (*fromlen < saddr.sa.sa_len) {
     truncated = 1;
diff -uprN lwip_old/src/apps/netbiosns/netbiosns.c lwip/src/apps/netbiosns/netbiosns.c
--- lwip_old/src/apps/netbiosns/netbiosns.c	2021-11-10 19:25:04.000000000 +0800
+++ lwip/src/apps/netbiosns/netbiosns.c	2024-01-22 10:34:37.272614301 +0800
@@ -98,14 +98,14 @@
 #  include "arch/bpstruct.h"
 #endif
 PACK_STRUCT_BEGIN
-struct netbios_hdr {
+PACK_STRUCT_STRUCT struct netbios_hdr {
   PACK_STRUCT_FIELD(u16_t trans_id);
   PACK_STRUCT_FIELD(u16_t flags);
   PACK_STRUCT_FIELD(u16_t questions);
   PACK_STRUCT_FIELD(u16_t answerRRs);
   PACK_STRUCT_FIELD(u16_t authorityRRs);
   PACK_STRUCT_FIELD(u16_t additionalRRs);
-} PACK_STRUCT_STRUCT;
+};
 PACK_STRUCT_END
 #ifdef PACK_STRUCT_USE_INCLUDES
 #  include "arch/epstruct.h"
@@ -116,12 +116,12 @@ PACK_STRUCT_END
 #  include "arch/bpstruct.h"
 #endif
 PACK_STRUCT_BEGIN
-struct netbios_question_hdr {
+PACK_STRUCT_STRUCT struct netbios_question_hdr {
   PACK_STRUCT_FLD_8(u8_t  nametype);
   PACK_STRUCT_FLD_8(u8_t  encname[(NETBIOS_NAME_LEN * 2) + 1]);
   PACK_STRUCT_FIELD(u16_t type);
   PACK_STRUCT_FIELD(u16_t cls);
-} PACK_STRUCT_STRUCT;
+};
 PACK_STRUCT_END
 #ifdef PACK_STRUCT_USE_INCLUDES
 #  include "arch/epstruct.h"
@@ -132,7 +132,7 @@ PACK_STRUCT_END
 #  include "arch/bpstruct.h"
 #endif
 PACK_STRUCT_BEGIN
-struct netbios_name_hdr {
+PACK_STRUCT_STRUCT struct netbios_name_hdr {
   PACK_STRUCT_FLD_8(u8_t  nametype);
   PACK_STRUCT_FLD_8(u8_t  encname[(NETBIOS_NAME_LEN * 2) + 1]);
   PACK_STRUCT_FIELD(u16_t type);
@@ -141,7 +141,7 @@ struct netbios_name_hdr {
   PACK_STRUCT_FIELD(u16_t datalen);
   PACK_STRUCT_FIELD(u16_t flags);
   PACK_STRUCT_FLD_S(ip4_addr_p_t addr);
-} PACK_STRUCT_STRUCT;
+};
 PACK_STRUCT_END
 #ifdef PACK_STRUCT_USE_INCLUDES
 #  include "arch/epstruct.h"
@@ -152,10 +152,10 @@ PACK_STRUCT_END
 #  include "arch/bpstruct.h"
 #endif
 PACK_STRUCT_BEGIN
-struct netbios_resp {
+PACK_STRUCT_STRUCT struct netbios_resp {
   struct netbios_hdr      resp_hdr;
   struct netbios_name_hdr resp_name;
-} PACK_STRUCT_STRUCT;
+};
 PACK_STRUCT_END
 #ifdef PACK_STRUCT_USE_INCLUDES
 #  include "arch/epstruct.h"
@@ -166,7 +166,7 @@ PACK_STRUCT_END
 #  include "arch/bpstruct.h"
 #endif
 PACK_STRUCT_BEGIN
-struct netbios_answer {
+PACK_STRUCT_STRUCT struct netbios_answer {
   struct netbios_hdr      answer_hdr;
   /** the length of the next string */
   PACK_STRUCT_FIELD(u8_t  name_size);
@@ -223,7 +223,7 @@ struct netbios_answer {
   PACK_STRUCT_FIELD(u16_t max_total_sessions_possible);
   /** Statistics */
   PACK_STRUCT_FIELD(u16_t session_data_packet_size);
-} PACK_STRUCT_STRUCT;
+};
 PACK_STRUCT_END
 #ifdef PACK_STRUCT_USE_INCLUDES
 #  include "arch/epstruct.h"
diff -uprN lwip_old/src/apps/sntp/sntp.c lwip/src/apps/sntp/sntp.c
--- lwip_old/src/apps/sntp/sntp.c	2021-11-10 19:25:04.000000000 +0800
+++ lwip/src/apps/sntp/sntp.c	2024-01-22 10:34:37.273614273 +0800
@@ -199,7 +199,7 @@ struct sntp_timestamps {
 #  include "arch/bpstruct.h"
 #endif
 PACK_STRUCT_BEGIN
-struct sntp_msg {
+PACK_STRUCT_STRUCT struct sntp_msg {
   PACK_STRUCT_FLD_8(u8_t  li_vn_mode);
   PACK_STRUCT_FLD_8(u8_t  stratum);
   PACK_STRUCT_FLD_8(u8_t  poll);
@@ -211,7 +211,7 @@ struct sntp_msg {
   PACK_STRUCT_FIELD(u32_t originate_timestamp[2]);
   PACK_STRUCT_FIELD(u32_t receive_timestamp[2]);
   PACK_STRUCT_FIELD(u32_t transmit_timestamp[2]);
-} PACK_STRUCT_STRUCT;
+};
 PACK_STRUCT_END
 #ifdef PACK_STRUCT_USE_INCLUDES
 #  include "arch/epstruct.h"
diff -uprN lwip_old/src/core/init.c lwip/src/core/init.c
--- lwip_old/src/core/init.c	2021-11-10 19:25:04.000000000 +0800
+++ lwip/src/core/init.c	2024-01-22 10:34:37.273614273 +0800
@@ -67,10 +67,10 @@
 #  include "arch/bpstruct.h"
 #endif
 PACK_STRUCT_BEGIN
-struct packed_struct_test {
+PACK_STRUCT_STRUCT struct packed_struct_test {
   PACK_STRUCT_FLD_8(u8_t  dummy1);
   PACK_STRUCT_FIELD(u32_t dummy2);
-} PACK_STRUCT_STRUCT;
+};
 PACK_STRUCT_END
 #ifdef PACK_STRUCT_USE_INCLUDES
 #  include "arch/epstruct.h"
@@ -237,9 +237,9 @@ PACK_STRUCT_END
 #error "NETCONN_MORE != TCP_WRITE_FLAG_MORE"
 #endif
 #endif /* LWIP_NETCONN && LWIP_TCP */
-#if LWIP_NETCONN_FULLDUPLEX && !LWIP_NETCONN_SEM_PER_THREAD
-#error "For LWIP_NETCONN_FULLDUPLEX to work, LWIP_NETCONN_SEM_PER_THREAD is required"
-#endif
+// #if LWIP_NETCONN_FULLDUPLEX && !LWIP_NETCONN_SEM_PER_THREAD
+// #error "For LWIP_NETCONN_FULLDUPLEX to work, LWIP_NETCONN_SEM_PER_THREAD is required"
+// #endif
 
 
 /* Compile-time checks for deprecated options.
diff -uprN lwip_old/src/core/ipv4/ip4_frag.c lwip/src/core/ipv4/ip4_frag.c
--- lwip_old/src/core/ipv4/ip4_frag.c	2021-11-10 19:25:04.000000000 +0800
+++ lwip/src/core/ipv4/ip4_frag.c	2024-01-22 10:34:37.273614273 +0800
@@ -95,11 +95,11 @@
 #  include "arch/bpstruct.h"
 #endif
 PACK_STRUCT_BEGIN
-struct ip_reass_helper {
+PACK_STRUCT_STRUCT struct ip_reass_helper {
   PACK_STRUCT_FIELD(struct pbuf *next_pbuf);
   PACK_STRUCT_FIELD(u16_t start);
   PACK_STRUCT_FIELD(u16_t end);
-} PACK_STRUCT_STRUCT;
+};
 PACK_STRUCT_END
 #ifdef PACK_STRUCT_USE_INCLUDES
 #  include "arch/epstruct.h"
diff -uprN lwip_old/src/core/ipv6/ip6_frag.c lwip/src/core/ipv6/ip6_frag.c
--- lwip_old/src/core/ipv6/ip6_frag.c	2021-11-10 19:25:04.000000000 +0800
+++ lwip/src/core/ipv6/ip6_frag.c	2024-01-22 10:34:37.274614246 +0800
@@ -89,11 +89,11 @@
 #  include "arch/bpstruct.h"
 #endif
 PACK_STRUCT_BEGIN
-struct ip6_reass_helper {
+PACK_STRUCT_STRUCT struct ip6_reass_helper {
   PACK_STRUCT_FIELD(struct pbuf *next_pbuf);
   PACK_STRUCT_FIELD(u16_t start);
   PACK_STRUCT_FIELD(u16_t end);
-} PACK_STRUCT_STRUCT;
+};
 PACK_STRUCT_END
 #ifdef PACK_STRUCT_USE_INCLUDES
 #  include "arch/epstruct.h"
diff -uprN lwip_old/src/include/lwip/inet.h lwip/src/include/lwip/inet.h
--- lwip_old/src/include/lwip/inet.h	2021-11-10 19:25:04.000000000 +0800
+++ lwip/src/include/lwip/inet.h	2024-01-22 10:34:37.274614246 +0800
@@ -49,92 +49,18 @@
 extern "C" {
 #endif
 
-/* If your port already typedef's in_addr_t, define IN_ADDR_T_DEFINED
-   to prevent this code from redefining it. */
-#if !defined(in_addr_t) && !defined(IN_ADDR_T_DEFINED)
-typedef u32_t in_addr_t;
-#endif
-
-struct in_addr {
-  in_addr_t s_addr;
-};
-
-struct in6_addr {
-  union {
-    u32_t u32_addr[4];
-    u8_t  u8_addr[16];
-  } un;
-#define s6_addr  un.u8_addr
-};
-
-/** 255.255.255.255 */
-#define INADDR_NONE         IPADDR_NONE
-/** 127.0.0.1 */
-#define INADDR_LOOPBACK     IPADDR_LOOPBACK
-/** 0.0.0.0 */
-#define INADDR_ANY          IPADDR_ANY
-/** 255.255.255.255 */
-#define INADDR_BROADCAST    IPADDR_BROADCAST
-
-/** This macro can be used to initialize a variable of type struct in6_addr
-    to the IPv6 wildcard address. */
-#define IN6ADDR_ANY_INIT {{{0,0,0,0}}}
-/** This macro can be used to initialize a variable of type struct in6_addr
-    to the IPv6 loopback address. */
-#define IN6ADDR_LOOPBACK_INIT {{{0,0,0,PP_HTONL(1)}}}
-/** This variable is initialized by the system to contain the wildcard IPv6 address. */
-extern const struct in6_addr in6addr_any;
-
 /* Definitions of the bits in an (IPv4) Internet address integer.
 
    On subnets, host and network parts are found according to
    the subnet mask, not these masks.  */
-#define IN_CLASSA(a)        IP_CLASSA(a)
-#define IN_CLASSA_NET       IP_CLASSA_NET
-#define IN_CLASSA_NSHIFT    IP_CLASSA_NSHIFT
-#define IN_CLASSA_HOST      IP_CLASSA_HOST
-#define IN_CLASSA_MAX       IP_CLASSA_MAX
-
-#define IN_CLASSB(b)        IP_CLASSB(b)
-#define IN_CLASSB_NET       IP_CLASSB_NET
-#define IN_CLASSB_NSHIFT    IP_CLASSB_NSHIFT
-#define IN_CLASSB_HOST      IP_CLASSB_HOST
-#define IN_CLASSB_MAX       IP_CLASSB_MAX
-
-#define IN_CLASSC(c)        IP_CLASSC(c)
-#define IN_CLASSC_NET       IP_CLASSC_NET
-#define IN_CLASSC_NSHIFT    IP_CLASSC_NSHIFT
-#define IN_CLASSC_HOST      IP_CLASSC_HOST
 #define IN_CLASSC_MAX       IP_CLASSC_MAX
 
-#define IN_CLASSD(d)        IP_CLASSD(d)
 #define IN_CLASSD_NET       IP_CLASSD_NET     /* These ones aren't really */
 #define IN_CLASSD_NSHIFT    IP_CLASSD_NSHIFT  /*   net and host fields, but */
 #define IN_CLASSD_HOST      IP_CLASSD_HOST    /*   routing needn't know. */
 #define IN_CLASSD_MAX       IP_CLASSD_MAX
 
-#define IN_MULTICAST(a)     IP_MULTICAST(a)
-
-#define IN_EXPERIMENTAL(a)  IP_EXPERIMENTAL(a)
-#define IN_BADCLASS(a)      IP_BADCLASS(a)
-
-#define IN_LOOPBACKNET      IP_LOOPBACKNET
-
-
-#ifndef INET_ADDRSTRLEN
-#define INET_ADDRSTRLEN     IP4ADDR_STRLEN_MAX
-#endif
-#if LWIP_IPV6
-#ifndef INET6_ADDRSTRLEN
-#define INET6_ADDRSTRLEN    IP6ADDR_STRLEN_MAX
-#endif
-#endif
-
 #if LWIP_IPV4
-
-#define inet_addr_from_ip4addr(target_inaddr, source_ipaddr) ((target_inaddr)->s_addr = ip4_addr_get_u32(source_ipaddr))
-#define inet_addr_to_ip4addr(target_ipaddr, source_inaddr)   (ip4_addr_set_u32(target_ipaddr, (source_inaddr)->s_addr))
-
 /* directly map this to the lwip internal functions */
 #define inet_addr(cp)                   ipaddr_addr(cp)
 #define inet_aton(cp, addr)             ip4addr_aton(cp, (ip4_addr_t*)addr)
@@ -144,16 +70,6 @@ extern const struct in6_addr in6addr_any
 #endif /* LWIP_IPV4 */
 
 #if LWIP_IPV6
-#define inet6_addr_from_ip6addr(target_in6addr, source_ip6addr) {(target_in6addr)->un.u32_addr[0] = (source_ip6addr)->addr[0]; \
-                                                                 (target_in6addr)->un.u32_addr[1] = (source_ip6addr)->addr[1]; \
-                                                                 (target_in6addr)->un.u32_addr[2] = (source_ip6addr)->addr[2]; \
-                                                                 (target_in6addr)->un.u32_addr[3] = (source_ip6addr)->addr[3];}
-#define inet6_addr_to_ip6addr(target_ip6addr, source_in6addr)   {(target_ip6addr)->addr[0] = (source_in6addr)->un.u32_addr[0]; \
-                                                                 (target_ip6addr)->addr[1] = (source_in6addr)->un.u32_addr[1]; \
-                                                                 (target_ip6addr)->addr[2] = (source_in6addr)->un.u32_addr[2]; \
-                                                                 (target_ip6addr)->addr[3] = (source_in6addr)->un.u32_addr[3]; \
-                                                                 ip6_addr_clear_zone(target_ip6addr);}
-
 /* directly map this to the lwip internal functions */
 #define inet6_aton(cp, addr)            ip6addr_aton(cp, (ip6_addr_t*)addr)
 #define inet6_ntoa(addr)                ip6addr_ntoa((const ip6_addr_t*)&(addr))
diff -uprN lwip_old/src/include/lwip/init.h lwip/src/include/lwip/init.h
--- lwip_old/src/include/lwip/init.h	2021-11-10 19:25:04.000000000 +0800
+++ lwip/src/include/lwip/init.h	2024-01-22 10:34:37.274614246 +0800
@@ -1,100 +1,100 @@
-/**
- * @file
- * lwIP initialization API
- */
-
-/*
- * Copyright (c) 2001-2004 Swedish Institute of Computer Science.
- * All rights reserved.
- *
- * Redistribution and use in source and binary forms, with or without modification,
- * are permitted provided that the following conditions are met:
- *
- * 1. Redistributions of source code must retain the above copyright notice,
- *    this list of conditions and the following disclaimer.
- * 2. Redistributions in binary form must reproduce the above copyright notice,
- *    this list of conditions and the following disclaimer in the documentation
- *    and/or other materials provided with the distribution.
- * 3. The name of the author may not be used to endorse or promote products
- *    derived from this software without specific prior written permission.
- *
- * THIS SOFTWARE IS PROVIDED BY THE AUTHOR ``AS IS'' AND ANY EXPRESS OR IMPLIED
- * WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF
- * MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT
- * SHALL THE AUTHOR BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL,
- * EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT
- * OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
- * INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
- * CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING
- * IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY
- * OF SUCH DAMAGE.
- *
- * This file is part of the lwIP TCP/IP stack.
- *
- * Author: Adam Dunkels <adam@sics.se>
- *
- */
-#ifndef LWIP_HDR_INIT_H
-#define LWIP_HDR_INIT_H
-
-#include "lwip/opt.h"
-
-#ifdef __cplusplus
-extern "C" {
-#endif
-
-/**
- * @defgroup lwip_version Version
- * @ingroup lwip
- * @{
- */
-
-/** X.x.x: Major version of the stack */
-#define LWIP_VERSION_MAJOR      2
-/** x.X.x: Minor version of the stack */
-#define LWIP_VERSION_MINOR      1
-/** x.x.X: Revision of the stack */
-#define LWIP_VERSION_REVISION   3
-/** For release candidates, this is set to 1..254
-  * For official releases, this is set to 255 (LWIP_RC_RELEASE)
-  * For development versions (Git), this is set to 0 (LWIP_RC_DEVELOPMENT) */
-#define LWIP_VERSION_RC         LWIP_RC_RELEASE
-
-/** LWIP_VERSION_RC is set to LWIP_RC_RELEASE for official releases */
-#define LWIP_RC_RELEASE         255
-/** LWIP_VERSION_RC is set to LWIP_RC_DEVELOPMENT for Git versions */
-#define LWIP_RC_DEVELOPMENT     0
-
-#define LWIP_VERSION_IS_RELEASE     (LWIP_VERSION_RC == LWIP_RC_RELEASE)
-#define LWIP_VERSION_IS_DEVELOPMENT (LWIP_VERSION_RC == LWIP_RC_DEVELOPMENT)
-#define LWIP_VERSION_IS_RC          ((LWIP_VERSION_RC != LWIP_RC_RELEASE) && (LWIP_VERSION_RC != LWIP_RC_DEVELOPMENT))
-
-/* Some helper defines to get a version string */
-#define LWIP_VERSTR2(x) #x
-#define LWIP_VERSTR(x) LWIP_VERSTR2(x)
-#if LWIP_VERSION_IS_RELEASE
-#define LWIP_VERSION_STRING_SUFFIX ""
-#elif LWIP_VERSION_IS_DEVELOPMENT
-#define LWIP_VERSION_STRING_SUFFIX "d"
-#else
-#define LWIP_VERSION_STRING_SUFFIX "rc" LWIP_VERSTR(LWIP_VERSION_RC)
-#endif
-
-/** Provides the version of the stack */
-#define LWIP_VERSION   ((LWIP_VERSION_MAJOR) << 24   | (LWIP_VERSION_MINOR) << 16 | \
-                        (LWIP_VERSION_REVISION) << 8 | (LWIP_VERSION_RC))
-/** Provides the version of the stack as string */
-#define LWIP_VERSION_STRING     LWIP_VERSTR(LWIP_VERSION_MAJOR) "." LWIP_VERSTR(LWIP_VERSION_MINOR) "." LWIP_VERSTR(LWIP_VERSION_REVISION) LWIP_VERSION_STRING_SUFFIX
-
-/**
- * @}
- */
-
-/* Modules initialization */
-void lwip_init(void);
-
-#ifdef __cplusplus
-}
-#endif
-
-#endif /* LWIP_HDR_INIT_H */
+/**
+ * @file
+ * lwIP initialization API
+ */
+
+/*
+ * Copyright (c) 2001-2004 Swedish Institute of Computer Science.
+ * All rights reserved.
+ *
+ * Redistribution and use in source and binary forms, with or without modification,
+ * are permitted provided that the following conditions are met:
+ *
+ * 1. Redistributions of source code must retain the above copyright notice,
+ *    this list of conditions and the following disclaimer.
+ * 2. Redistributions in binary form must reproduce the above copyright notice,
+ *    this list of conditions and the following disclaimer in the documentation
+ *    and/or other materials provided with the distribution.
+ * 3. The name of the author may not be used to endorse or promote products
+ *    derived from this software without specific prior written permission.
+ *
+ * THIS SOFTWARE IS PROVIDED BY THE AUTHOR ``AS IS'' AND ANY EXPRESS OR IMPLIED
+ * WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF
+ * MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT
+ * SHALL THE AUTHOR BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL,
+ * EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT
+ * OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
+ * INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
+ * CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING
+ * IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY
+ * OF SUCH DAMAGE.
+ *
+ * This file is part of the lwIP TCP/IP stack.
+ *
+ * Author: Adam Dunkels <adam@sics.se>
+ *
+ */
+#ifndef LWIP_HDR_INIT_H
+#define LWIP_HDR_INIT_H
+
+#include "lwip/opt.h"
+
+#ifdef __cplusplus
+extern "C" {
+#endif
+
+/**
+ * @defgroup lwip_version Version
+ * @ingroup lwip
+ * @{
+ */
+
+/** X.x.x: Major version of the stack */
+#define LWIP_VERSION_MAJOR      2
+/** x.X.x: Minor version of the stack */
+#define LWIP_VERSION_MINOR      1
+/** x.x.X: Revision of the stack */
+#define LWIP_VERSION_REVISION   3
+/** For release candidates, this is set to 1..254
+  * For official releases, this is set to 255 (LWIP_RC_RELEASE)
+  * For development versions (Git), this is set to 0 (LWIP_RC_DEVELOPMENT) */
+#define LWIP_VERSION_RC         LWIP_RC_RELEASE
+
+/** LWIP_VERSION_RC is set to LWIP_RC_RELEASE for official releases */
+#define LWIP_RC_RELEASE         255
+/** LWIP_VERSION_RC is set to LWIP_RC_DEVELOPMENT for Git versions */
+#define LWIP_RC_DEVELOPMENT     0
+
+#define LWIP_VERSION_IS_RELEASE     (LWIP_VERSION_RC == LWIP_RC_RELEASE)
+#define LWIP_VERSION_IS_DEVELOPMENT (LWIP_VERSION_RC == LWIP_RC_DEVELOPMENT)
+#define LWIP_VERSION_IS_RC          ((LWIP_VERSION_RC != LWIP_RC_RELEASE) && (LWIP_VERSION_RC != LWIP_RC_DEVELOPMENT))
+
+/* Some helper defines to get a version string */
+#define LWIP_VERSTR2(x) #x
+#define LWIP_VERSTR(x) LWIP_VERSTR2(x)
+#if LWIP_VERSION_IS_RELEASE
+#define LWIP_VERSION_STRING_SUFFIX ""
+#elif LWIP_VERSION_IS_DEVELOPMENT
+#define LWIP_VERSION_STRING_SUFFIX "d"
+#else
+#define LWIP_VERSION_STRING_SUFFIX "rc" LWIP_VERSTR(LWIP_VERSION_RC)
+#endif
+
+/** Provides the version of the stack */
+#define LWIP_VERSION   ((LWIP_VERSION_MAJOR) << 24   | (LWIP_VERSION_MINOR) << 16 | \
+                        (LWIP_VERSION_REVISION) << 8 | (LWIP_VERSION_RC))
+/** Provides the version of the stack as string */
+#define LWIP_VERSION_STRING     LWIP_VERSTR(LWIP_VERSION_MAJOR) "." LWIP_VERSTR(LWIP_VERSION_MINOR) "." LWIP_VERSTR(LWIP_VERSION_REVISION) LWIP_VERSION_STRING_SUFFIX
+
+/**
+ * @}
+ */
+
+/* Modules initialization */
+void lwip_init(void);
+
+#ifdef __cplusplus
+}
+#endif
+
+#endif /* LWIP_HDR_INIT_H */
diff -uprN lwip_old/src/include/lwip/prot/dhcp.h lwip/src/include/lwip/prot/dhcp.h
--- lwip_old/src/include/lwip/prot/dhcp.h	2021-11-10 19:25:04.000000000 +0800
+++ lwip/src/include/lwip/prot/dhcp.h	2024-01-22 10:34:37.274614246 +0800
@@ -60,7 +60,7 @@ extern "C" {
 #endif
 PACK_STRUCT_BEGIN
 /** minimum set of fields of any DHCP message */
-struct dhcp_msg
+PACK_STRUCT_STRUCT struct dhcp_msg
 {
   PACK_STRUCT_FLD_8(u8_t op);
   PACK_STRUCT_FLD_8(u8_t htype);
@@ -88,7 +88,7 @@ struct dhcp_msg
 #  define DHCP_OPTIONS_LEN DHCP_MIN_OPTIONS_LEN
 #endif
   PACK_STRUCT_FLD_8(u8_t options[DHCP_OPTIONS_LEN]);
-} PACK_STRUCT_STRUCT;
+};
 PACK_STRUCT_END
 #ifdef PACK_STRUCT_USE_INCLUDES
 #  include "arch/epstruct.h"
diff -uprN lwip_old/src/include/lwip/prot/dhcp6.h lwip/src/include/lwip/prot/dhcp6.h
--- lwip_old/src/include/lwip/prot/dhcp6.h	2021-11-10 19:25:04.000000000 +0800
+++ lwip/src/include/lwip/prot/dhcp6.h	2024-01-22 10:34:37.275614218 +0800
@@ -55,12 +55,12 @@ extern "C" {
 #endif
 PACK_STRUCT_BEGIN
 /** minimum set of fields of any DHCPv6 message */
-struct dhcp6_msg
+PACK_STRUCT_STRUCT struct dhcp6_msg
 {
   PACK_STRUCT_FLD_8(u8_t msgtype);
   PACK_STRUCT_FLD_8(u8_t transaction_id[DHCP6_TRANSACTION_ID_LEN]);
   /* options follow */
-} PACK_STRUCT_STRUCT;
+};
 PACK_STRUCT_END
 #ifdef PACK_STRUCT_USE_INCLUDES
 #  include "arch/epstruct.h"
diff -uprN lwip_old/src/include/lwip/prot/dns.h lwip/src/include/lwip/prot/dns.h
--- lwip_old/src/include/lwip/prot/dns.h	2021-11-10 19:25:04.000000000 +0800
+++ lwip/src/include/lwip/prot/dns.h	2024-01-22 10:34:37.275614218 +0800
@@ -100,7 +100,7 @@ extern "C" {
 #endif
 PACK_STRUCT_BEGIN
 /** DNS message header */
-struct dns_hdr {
+PACK_STRUCT_STRUCT struct dns_hdr {
   PACK_STRUCT_FIELD(u16_t id);
   PACK_STRUCT_FLD_8(u8_t flags1);
   PACK_STRUCT_FLD_8(u8_t flags2);
@@ -108,7 +108,7 @@ struct dns_hdr {
   PACK_STRUCT_FIELD(u16_t numanswers);
   PACK_STRUCT_FIELD(u16_t numauthrr);
   PACK_STRUCT_FIELD(u16_t numextrarr);
-} PACK_STRUCT_STRUCT;
+};
 PACK_STRUCT_END
 #ifdef PACK_STRUCT_USE_INCLUDES
 #  include "arch/epstruct.h"
diff -uprN lwip_old/src/include/lwip/prot/etharp.h lwip/src/include/lwip/prot/etharp.h
--- lwip_old/src/include/lwip/prot/etharp.h	2021-11-10 19:25:04.000000000 +0800
+++ lwip/src/include/lwip/prot/etharp.h	2024-01-22 10:34:37.275614218 +0800
@@ -56,9 +56,9 @@ extern "C" {
 #  include "arch/bpstruct.h"
 #endif
 PACK_STRUCT_BEGIN
-struct ip4_addr_wordaligned {
+PACK_STRUCT_STRUCT struct ip4_addr_wordaligned {
   PACK_STRUCT_FIELD(u16_t addrw[2]);
-} PACK_STRUCT_STRUCT;
+};
 PACK_STRUCT_END
 #ifdef PACK_STRUCT_USE_INCLUDES
 #  include "arch/epstruct.h"
@@ -83,7 +83,7 @@ PACK_STRUCT_END
 #endif
 PACK_STRUCT_BEGIN
 /** the ARP message, see RFC 826 ("Packet format") */
-struct etharp_hdr {
+PACK_STRUCT_STRUCT struct etharp_hdr {
   PACK_STRUCT_FIELD(u16_t hwtype);
   PACK_STRUCT_FIELD(u16_t proto);
   PACK_STRUCT_FLD_8(u8_t  hwlen);
@@ -93,7 +93,7 @@ struct etharp_hdr {
   PACK_STRUCT_FLD_S(struct ip4_addr_wordaligned sipaddr);
   PACK_STRUCT_FLD_S(struct eth_addr dhwaddr);
   PACK_STRUCT_FLD_S(struct ip4_addr_wordaligned dipaddr);
-} PACK_STRUCT_STRUCT;
+};
 PACK_STRUCT_END
 #ifdef PACK_STRUCT_USE_INCLUDES
 #  include "arch/epstruct.h"
diff -uprN lwip_old/src/include/lwip/prot/ethernet.h lwip/src/include/lwip/prot/ethernet.h
--- lwip_old/src/include/lwip/prot/ethernet.h	2021-11-10 19:25:04.000000000 +0800
+++ lwip/src/include/lwip/prot/ethernet.h	2024-01-22 10:34:37.275614218 +0800
@@ -57,9 +57,9 @@ extern "C" {
 #endif
 PACK_STRUCT_BEGIN
 /** An Ethernet MAC address */
-struct eth_addr {
+PACK_STRUCT_STRUCT struct eth_addr {
   PACK_STRUCT_FLD_8(u8_t addr[ETH_HWADDR_LEN]);
-} PACK_STRUCT_STRUCT;
+};
 PACK_STRUCT_END
 #ifdef PACK_STRUCT_USE_INCLUDES
 #  include "arch/epstruct.h"
@@ -73,14 +73,14 @@ PACK_STRUCT_END
 #endif
 PACK_STRUCT_BEGIN
 /** Ethernet header */
-struct eth_hdr {
+PACK_STRUCT_STRUCT struct eth_hdr {
 #if ETH_PAD_SIZE
   PACK_STRUCT_FLD_8(u8_t padding[ETH_PAD_SIZE]);
 #endif
   PACK_STRUCT_FLD_S(struct eth_addr dest);
   PACK_STRUCT_FLD_S(struct eth_addr src);
   PACK_STRUCT_FIELD(u16_t type);
-} PACK_STRUCT_STRUCT;
+};
 PACK_STRUCT_END
 #ifdef PACK_STRUCT_USE_INCLUDES
 #  include "arch/epstruct.h"
@@ -95,10 +95,10 @@ PACK_STRUCT_BEGIN
 /** VLAN header inserted between ethernet header and payload
  * if 'type' in ethernet header is ETHTYPE_VLAN.
  * See IEEE802.Q */
-struct eth_vlan_hdr {
+PACK_STRUCT_STRUCT struct eth_vlan_hdr {
   PACK_STRUCT_FIELD(u16_t prio_vid);
   PACK_STRUCT_FIELD(u16_t tpid);
-} PACK_STRUCT_STRUCT;
+};
 PACK_STRUCT_END
 #ifdef PACK_STRUCT_USE_INCLUDES
 #  include "arch/epstruct.h"
diff -uprN lwip_old/src/include/lwip/prot/icmp.h lwip/src/include/lwip/prot/icmp.h
--- lwip_old/src/include/lwip/prot/icmp.h	2021-11-10 19:25:04.000000000 +0800
+++ lwip/src/include/lwip/prot/icmp.h	2024-01-22 10:34:37.276614190 +0800
@@ -66,13 +66,13 @@ extern "C" {
  *  use the data part.
  */
 PACK_STRUCT_BEGIN
-struct icmp_echo_hdr {
+PACK_STRUCT_STRUCT struct icmp_echo_hdr {
   PACK_STRUCT_FLD_8(u8_t type);
   PACK_STRUCT_FLD_8(u8_t code);
   PACK_STRUCT_FIELD(u16_t chksum);
   PACK_STRUCT_FIELD(u16_t id);
   PACK_STRUCT_FIELD(u16_t seqno);
-} PACK_STRUCT_STRUCT;
+};
 PACK_STRUCT_END
 #ifdef PACK_STRUCT_USE_INCLUDES
 #  include "arch/epstruct.h"
diff -uprN lwip_old/src/include/lwip/prot/icmp6.h lwip/src/include/lwip/prot/icmp6.h
--- lwip_old/src/include/lwip/prot/icmp6.h	2021-11-10 19:25:04.000000000 +0800
+++ lwip/src/include/lwip/prot/icmp6.h	2024-01-22 10:34:37.276614190 +0800
@@ -135,12 +135,12 @@ enum icmp6_pp_code {
 #  include "arch/bpstruct.h"
 #endif
 PACK_STRUCT_BEGIN
-struct icmp6_hdr {
+PACK_STRUCT_STRUCT struct icmp6_hdr {
   PACK_STRUCT_FLD_8(u8_t type);
   PACK_STRUCT_FLD_8(u8_t code);
   PACK_STRUCT_FIELD(u16_t chksum);
   PACK_STRUCT_FIELD(u32_t data);
-} PACK_STRUCT_STRUCT;
+};
 PACK_STRUCT_END
 #ifdef PACK_STRUCT_USE_INCLUDES
 #  include "arch/epstruct.h"
@@ -153,13 +153,13 @@ PACK_STRUCT_END
 #  include "arch/bpstruct.h"
 #endif
 PACK_STRUCT_BEGIN
-struct icmp6_echo_hdr {
+PACK_STRUCT_STRUCT struct icmp6_echo_hdr {
   PACK_STRUCT_FLD_8(u8_t type);
   PACK_STRUCT_FLD_8(u8_t code);
   PACK_STRUCT_FIELD(u16_t chksum);
   PACK_STRUCT_FIELD(u16_t id);
   PACK_STRUCT_FIELD(u16_t seqno);
-} PACK_STRUCT_STRUCT;
+};
 PACK_STRUCT_END
 #ifdef PACK_STRUCT_USE_INCLUDES
 #  include "arch/epstruct.h"
diff -uprN lwip_old/src/include/lwip/prot/igmp.h lwip/src/include/lwip/prot/igmp.h
--- lwip_old/src/include/lwip/prot/igmp.h	2021-11-10 19:25:04.000000000 +0800
+++ lwip/src/include/lwip/prot/igmp.h	2024-01-22 10:34:37.276614190 +0800
@@ -72,12 +72,12 @@ extern "C" {
 #  include "arch/bpstruct.h"
 #endif
 PACK_STRUCT_BEGIN
-struct igmp_msg {
+PACK_STRUCT_STRUCT struct igmp_msg {
   PACK_STRUCT_FLD_8(u8_t         igmp_msgtype);
   PACK_STRUCT_FLD_8(u8_t         igmp_maxresp);
   PACK_STRUCT_FIELD(u16_t        igmp_checksum);
   PACK_STRUCT_FLD_S(ip4_addr_p_t igmp_group_address);
-} PACK_STRUCT_STRUCT;
+};
 PACK_STRUCT_END
 #ifdef PACK_STRUCT_USE_INCLUDES
 #  include "arch/epstruct.h"
diff -uprN lwip_old/src/include/lwip/prot/ip4.h lwip/src/include/lwip/prot/ip4.h
--- lwip_old/src/include/lwip/prot/ip4.h	2021-11-10 19:25:04.000000000 +0800
+++ lwip/src/include/lwip/prot/ip4.h	2024-01-22 10:34:37.276614190 +0800
@@ -50,9 +50,9 @@ extern "C" {
 #  include "arch/bpstruct.h"
 #endif
 PACK_STRUCT_BEGIN
-struct ip4_addr_packed {
+PACK_STRUCT_STRUCT struct ip4_addr_packed {
   PACK_STRUCT_FIELD(u32_t addr);
-} PACK_STRUCT_STRUCT;
+};
 PACK_STRUCT_END
 #ifdef PACK_STRUCT_USE_INCLUDES
 #  include "arch/epstruct.h"
@@ -70,7 +70,7 @@ typedef struct ip4_addr_packed ip4_addr_
 #endif
 PACK_STRUCT_BEGIN
 /* The IPv4 header */
-struct ip_hdr {
+PACK_STRUCT_STRUCT struct ip_hdr {
   /* version / header length */
   PACK_STRUCT_FLD_8(u8_t _v_hl);
   /* type of service */
@@ -81,10 +81,6 @@ struct ip_hdr {
   PACK_STRUCT_FIELD(u16_t _id);
   /* fragment offset field */
   PACK_STRUCT_FIELD(u16_t _offset);
-#define IP_RF 0x8000U        /* reserved fragment flag */
-#define IP_DF 0x4000U        /* don't fragment flag */
-#define IP_MF 0x2000U        /* more fragments flag */
-#define IP_OFFMASK 0x1fffU   /* mask for fragmenting bits */
   /* time to live */
   PACK_STRUCT_FLD_8(u8_t _ttl);
   /* protocol*/
@@ -94,7 +90,7 @@ struct ip_hdr {
   /* source and destination IP addresses */
   PACK_STRUCT_FLD_S(ip4_addr_p_t src);
   PACK_STRUCT_FLD_S(ip4_addr_p_t dest);
-} PACK_STRUCT_STRUCT;
+};
 PACK_STRUCT_END
 #ifdef PACK_STRUCT_USE_INCLUDES
 #  include "arch/epstruct.h"
diff -uprN lwip_old/src/include/lwip/prot/ip6.h lwip/src/include/lwip/prot/ip6.h
--- lwip_old/src/include/lwip/prot/ip6.h	2021-11-10 19:25:04.000000000 +0800
+++ lwip/src/include/lwip/prot/ip6.h	2024-01-22 10:34:37.276614190 +0800
@@ -52,9 +52,9 @@ extern "C" {
 #  include "arch/bpstruct.h"
 #endif
 PACK_STRUCT_BEGIN
-struct ip6_addr_packed {
+PACK_STRUCT_STRUCT struct ip6_addr_packed {
   PACK_STRUCT_FIELD(u32_t addr[4]);
-} PACK_STRUCT_STRUCT;
+};
 PACK_STRUCT_END
 #ifdef PACK_STRUCT_USE_INCLUDES
 #  include "arch/epstruct.h"
@@ -79,7 +79,7 @@ typedef struct ip6_addr_packed ip6_addr_
 #  include "arch/bpstruct.h"
 #endif
 PACK_STRUCT_BEGIN
-struct ip6_hdr {
+PACK_STRUCT_STRUCT struct ip6_hdr {
   /** version / traffic class / flow label */
   PACK_STRUCT_FIELD(u32_t _v_tc_fl);
   /** payload length */
@@ -91,7 +91,7 @@ struct ip6_hdr {
   /** source and destination IP addresses */
   PACK_STRUCT_FLD_S(ip6_addr_p_t src);
   PACK_STRUCT_FLD_S(ip6_addr_p_t dest);
-} PACK_STRUCT_STRUCT;
+};
 PACK_STRUCT_END
 #ifdef PACK_STRUCT_USE_INCLUDES
 #  include "arch/epstruct.h"
@@ -121,12 +121,12 @@ PACK_STRUCT_END
 #  include "arch/bpstruct.h"
 #endif
 PACK_STRUCT_BEGIN
-struct ip6_opt_hdr {
+PACK_STRUCT_STRUCT struct ip6_opt_hdr {
   /* router alert option type */
   PACK_STRUCT_FLD_8(u8_t _opt_type);
   /* router alert option data len */
   PACK_STRUCT_FLD_8(u8_t _opt_dlen);
-} PACK_STRUCT_STRUCT;
+};
 PACK_STRUCT_END
 #ifdef PACK_STRUCT_USE_INCLUDES
 #  include "arch/epstruct.h"
@@ -144,12 +144,12 @@ PACK_STRUCT_END
 #  include "arch/bpstruct.h"
 #endif
 PACK_STRUCT_BEGIN
-struct ip6_hbh_hdr {
+PACK_STRUCT_STRUCT struct ip6_hbh_hdr {
   /* next header */
   PACK_STRUCT_FLD_8(u8_t _nexth);
   /* header length in 8-octet units */
   PACK_STRUCT_FLD_8(u8_t _hlen);
-} PACK_STRUCT_STRUCT;
+};
 PACK_STRUCT_END
 #ifdef PACK_STRUCT_USE_INCLUDES
 #  include "arch/epstruct.h"
@@ -163,12 +163,12 @@ PACK_STRUCT_END
 #  include "arch/bpstruct.h"
 #endif
 PACK_STRUCT_BEGIN
-struct ip6_dest_hdr {
+PACK_STRUCT_STRUCT struct ip6_dest_hdr {
   /* next header */
   PACK_STRUCT_FLD_8(u8_t _nexth);
   /* header length in 8-octet units */
   PACK_STRUCT_FLD_8(u8_t _hlen);
-} PACK_STRUCT_STRUCT;
+};
 PACK_STRUCT_END
 #ifdef PACK_STRUCT_USE_INCLUDES
 #  include "arch/epstruct.h"
@@ -183,7 +183,7 @@ PACK_STRUCT_END
 #  include "arch/bpstruct.h"
 #endif
 PACK_STRUCT_BEGIN
-struct ip6_rout_hdr {
+PACK_STRUCT_STRUCT struct ip6_rout_hdr {
   /* next header */
   PACK_STRUCT_FLD_8(u8_t _nexth);
   /* reserved */
@@ -192,7 +192,7 @@ struct ip6_rout_hdr {
   PACK_STRUCT_FIELD(u8_t _routing_type);
   /* fragmented packet identification */
   PACK_STRUCT_FIELD(u8_t _segments_left);
-} PACK_STRUCT_STRUCT;
+};
 PACK_STRUCT_END
 #ifdef PACK_STRUCT_USE_INCLUDES
 #  include "arch/epstruct.h"
@@ -210,7 +210,7 @@ PACK_STRUCT_END
 #  include "arch/bpstruct.h"
 #endif
 PACK_STRUCT_BEGIN
-struct ip6_frag_hdr {
+PACK_STRUCT_STRUCT struct ip6_frag_hdr {
   /* next header */
   PACK_STRUCT_FLD_8(u8_t _nexth);
   /* reserved */
@@ -219,7 +219,7 @@ struct ip6_frag_hdr {
   PACK_STRUCT_FIELD(u16_t _fragment_offset);
   /* fragmented packet identification */
   PACK_STRUCT_FIELD(u32_t _identification);
-} PACK_STRUCT_STRUCT;
+};
 PACK_STRUCT_END
 #ifdef PACK_STRUCT_USE_INCLUDES
 #  include "arch/epstruct.h"
diff -uprN lwip_old/src/include/lwip/prot/mld6.h lwip/src/include/lwip/prot/mld6.h
--- lwip_old/src/include/lwip/prot/mld6.h	2021-11-10 19:25:04.000000000 +0800
+++ lwip/src/include/lwip/prot/mld6.h	2024-01-22 10:34:37.277614162 +0800
@@ -50,7 +50,7 @@ extern "C" {
 #  include "arch/bpstruct.h"
 #endif
 PACK_STRUCT_BEGIN
-struct mld_header {
+PACK_STRUCT_STRUCT struct mld_header {
   PACK_STRUCT_FLD_8(u8_t type);
   PACK_STRUCT_FLD_8(u8_t code);
   PACK_STRUCT_FIELD(u16_t chksum);
@@ -58,7 +58,7 @@ struct mld_header {
   PACK_STRUCT_FIELD(u16_t reserved);
   PACK_STRUCT_FLD_S(ip6_addr_p_t multicast_address);
   /* Options follow. */
-} PACK_STRUCT_STRUCT;
+};
 PACK_STRUCT_END
 #ifdef PACK_STRUCT_USE_INCLUDES
 #  include "arch/epstruct.h"
diff -uprN lwip_old/src/include/lwip/prot/nd6.h lwip/src/include/lwip/prot/nd6.h
--- lwip_old/src/include/lwip/prot/nd6.h	2021-11-10 19:25:04.000000000 +0800
+++ lwip/src/include/lwip/prot/nd6.h	2024-01-22 10:34:37.277614162 +0800
@@ -50,14 +50,14 @@ extern "C" {
 #  include "arch/bpstruct.h"
 #endif
 PACK_STRUCT_BEGIN
-struct ns_header {
+PACK_STRUCT_STRUCT struct ns_header {
   PACK_STRUCT_FLD_8(u8_t type);
   PACK_STRUCT_FLD_8(u8_t code);
   PACK_STRUCT_FIELD(u16_t chksum);
   PACK_STRUCT_FIELD(u32_t reserved);
   PACK_STRUCT_FLD_S(ip6_addr_p_t target_address);
   /* Options follow. */
-} PACK_STRUCT_STRUCT;
+};
 PACK_STRUCT_END
 #ifdef PACK_STRUCT_USE_INCLUDES
 #  include "arch/epstruct.h"
@@ -68,7 +68,7 @@ PACK_STRUCT_END
 #  include "arch/bpstruct.h"
 #endif
 PACK_STRUCT_BEGIN
-struct na_header {
+PACK_STRUCT_STRUCT struct na_header {
   PACK_STRUCT_FLD_8(u8_t type);
   PACK_STRUCT_FLD_8(u8_t code);
   PACK_STRUCT_FIELD(u16_t chksum);
@@ -76,7 +76,7 @@ struct na_header {
   PACK_STRUCT_FLD_8(u8_t reserved[3]);
   PACK_STRUCT_FLD_S(ip6_addr_p_t target_address);
   /* Options follow. */
-} PACK_STRUCT_STRUCT;
+};
 PACK_STRUCT_END
 #ifdef PACK_STRUCT_USE_INCLUDES
 #  include "arch/epstruct.h"
@@ -90,13 +90,13 @@ PACK_STRUCT_END
 #  include "arch/bpstruct.h"
 #endif
 PACK_STRUCT_BEGIN
-struct rs_header {
+PACK_STRUCT_STRUCT struct rs_header {
   PACK_STRUCT_FLD_8(u8_t type);
   PACK_STRUCT_FLD_8(u8_t code);
   PACK_STRUCT_FIELD(u16_t chksum);
   PACK_STRUCT_FIELD(u32_t reserved);
   /* Options follow. */
-} PACK_STRUCT_STRUCT;
+};
 PACK_STRUCT_END
 #ifdef PACK_STRUCT_USE_INCLUDES
 #  include "arch/epstruct.h"
@@ -115,7 +115,7 @@ PACK_STRUCT_END
 #  include "arch/bpstruct.h"
 #endif
 PACK_STRUCT_BEGIN
-struct ra_header {
+PACK_STRUCT_STRUCT struct ra_header {
   PACK_STRUCT_FLD_8(u8_t type);
   PACK_STRUCT_FLD_8(u8_t code);
   PACK_STRUCT_FIELD(u16_t chksum);
@@ -125,7 +125,7 @@ struct ra_header {
   PACK_STRUCT_FIELD(u32_t reachable_time);
   PACK_STRUCT_FIELD(u32_t retrans_timer);
   /* Options follow. */
-} PACK_STRUCT_STRUCT;
+};
 PACK_STRUCT_END
 #ifdef PACK_STRUCT_USE_INCLUDES
 #  include "arch/epstruct.h"
@@ -136,7 +136,7 @@ PACK_STRUCT_END
 #  include "arch/bpstruct.h"
 #endif
 PACK_STRUCT_BEGIN
-struct redirect_header {
+PACK_STRUCT_STRUCT struct redirect_header {
   PACK_STRUCT_FLD_8(u8_t type);
   PACK_STRUCT_FLD_8(u8_t code);
   PACK_STRUCT_FIELD(u16_t chksum);
@@ -144,7 +144,7 @@ struct redirect_header {
   PACK_STRUCT_FLD_S(ip6_addr_p_t target_address);
   PACK_STRUCT_FLD_S(ip6_addr_p_t destination_address);
   /* Options follow. */
-} PACK_STRUCT_STRUCT;
+};
 PACK_STRUCT_END
 #ifdef PACK_STRUCT_USE_INCLUDES
 #  include "arch/epstruct.h"
@@ -157,11 +157,11 @@ PACK_STRUCT_END
 #  include "arch/bpstruct.h"
 #endif
 PACK_STRUCT_BEGIN
-struct lladdr_option {
+PACK_STRUCT_STRUCT struct lladdr_option {
   PACK_STRUCT_FLD_8(u8_t type);
   PACK_STRUCT_FLD_8(u8_t length);
   PACK_STRUCT_FLD_8(u8_t addr[NETIF_MAX_HWADDR_LEN]);
-} PACK_STRUCT_STRUCT;
+};
 PACK_STRUCT_END
 #ifdef PACK_STRUCT_USE_INCLUDES
 #  include "arch/epstruct.h"
@@ -177,7 +177,7 @@ PACK_STRUCT_END
 #  include "arch/bpstruct.h"
 #endif
 PACK_STRUCT_BEGIN
-struct prefix_option {
+PACK_STRUCT_STRUCT struct prefix_option {
   PACK_STRUCT_FLD_8(u8_t type);
   PACK_STRUCT_FLD_8(u8_t length);
   PACK_STRUCT_FLD_8(u8_t prefix_length);
@@ -187,7 +187,7 @@ struct prefix_option {
   PACK_STRUCT_FLD_8(u8_t reserved2[3]);
   PACK_STRUCT_FLD_8(u8_t site_prefix_length);
   PACK_STRUCT_FLD_S(ip6_addr_p_t prefix);
-} PACK_STRUCT_STRUCT;
+};
 PACK_STRUCT_END
 #ifdef PACK_STRUCT_USE_INCLUDES
 #  include "arch/epstruct.h"
@@ -199,13 +199,13 @@ PACK_STRUCT_END
 #  include "arch/bpstruct.h"
 #endif
 PACK_STRUCT_BEGIN
-struct redirected_header_option {
+PACK_STRUCT_STRUCT struct redirected_header_option {
   PACK_STRUCT_FLD_8(u8_t type);
   PACK_STRUCT_FLD_8(u8_t length);
   PACK_STRUCT_FLD_8(u8_t reserved[6]);
   /* Portion of redirected packet follows. */
   /* PACK_STRUCT_FLD_8(u8_t redirected[8]); */
-} PACK_STRUCT_STRUCT;
+};
 PACK_STRUCT_END
 #ifdef PACK_STRUCT_USE_INCLUDES
 #  include "arch/epstruct.h"
@@ -217,12 +217,12 @@ PACK_STRUCT_END
 #  include "arch/bpstruct.h"
 #endif
 PACK_STRUCT_BEGIN
-struct mtu_option {
+PACK_STRUCT_STRUCT struct mtu_option {
   PACK_STRUCT_FLD_8(u8_t type);
   PACK_STRUCT_FLD_8(u8_t length);
   PACK_STRUCT_FIELD(u16_t reserved);
   PACK_STRUCT_FIELD(u32_t mtu);
-} PACK_STRUCT_STRUCT;
+};
 PACK_STRUCT_END
 #ifdef PACK_STRUCT_USE_INCLUDES
 #  include "arch/epstruct.h"
@@ -234,14 +234,14 @@ PACK_STRUCT_END
 #  include "arch/bpstruct.h"
 #endif
 PACK_STRUCT_BEGIN
-struct route_option {
+PACK_STRUCT_STRUCT struct route_option {
   PACK_STRUCT_FLD_8(u8_t type);
   PACK_STRUCT_FLD_8(u8_t length);
   PACK_STRUCT_FLD_8(u8_t prefix_length);
   PACK_STRUCT_FLD_8(u8_t preference);
   PACK_STRUCT_FIELD(u32_t route_lifetime);
   PACK_STRUCT_FLD_S(ip6_addr_p_t prefix);
-} PACK_STRUCT_STRUCT;
+};
 PACK_STRUCT_END
 #ifdef PACK_STRUCT_USE_INCLUDES
 #  include "arch/epstruct.h"
@@ -253,13 +253,13 @@ PACK_STRUCT_END
 #  include "arch/bpstruct.h"
 #endif
 PACK_STRUCT_BEGIN
-struct rdnss_option {
+PACK_STRUCT_STRUCT struct rdnss_option {
   PACK_STRUCT_FLD_8(u8_t type);
   PACK_STRUCT_FLD_8(u8_t length);
   PACK_STRUCT_FIELD(u16_t reserved);
   PACK_STRUCT_FIELD(u32_t lifetime);
   PACK_STRUCT_FLD_S(ip6_addr_p_t rdnss_address[1]);
-} PACK_STRUCT_STRUCT;
+};
 PACK_STRUCT_END
 #ifdef PACK_STRUCT_USE_INCLUDES
 #  include "arch/epstruct.h"
diff -uprN lwip_old/src/include/lwip/prot/tcp.h lwip/src/include/lwip/prot/tcp.h
--- lwip_old/src/include/lwip/prot/tcp.h	2021-11-10 19:25:04.000000000 +0800
+++ lwip/src/include/lwip/prot/tcp.h	2024-01-22 10:34:37.277614162 +0800
@@ -53,7 +53,7 @@ extern "C" {
 #  include "arch/bpstruct.h"
 #endif
 PACK_STRUCT_BEGIN
-struct tcp_hdr {
+PACK_STRUCT_STRUCT struct tcp_hdr {
   PACK_STRUCT_FIELD(u16_t src);
   PACK_STRUCT_FIELD(u16_t dest);
   PACK_STRUCT_FIELD(u32_t seqno);
@@ -62,7 +62,7 @@ struct tcp_hdr {
   PACK_STRUCT_FIELD(u16_t wnd);
   PACK_STRUCT_FIELD(u16_t chksum);
   PACK_STRUCT_FIELD(u16_t urgp);
-} PACK_STRUCT_STRUCT;
+};
 PACK_STRUCT_END
 #ifdef PACK_STRUCT_USE_INCLUDES
 #  include "arch/epstruct.h"
diff -uprN lwip_old/src/include/lwip/prot/udp.h lwip/src/include/lwip/prot/udp.h
--- lwip_old/src/include/lwip/prot/udp.h	2021-11-10 19:25:04.000000000 +0800
+++ lwip/src/include/lwip/prot/udp.h	2024-01-22 10:34:37.277614162 +0800
@@ -50,12 +50,12 @@ extern "C" {
 #  include "arch/bpstruct.h"
 #endif
 PACK_STRUCT_BEGIN
-struct udp_hdr {
+PACK_STRUCT_STRUCT struct udp_hdr {
   PACK_STRUCT_FIELD(u16_t src);
   PACK_STRUCT_FIELD(u16_t dest);  /* src/dest UDP ports */
   PACK_STRUCT_FIELD(u16_t len);
   PACK_STRUCT_FIELD(u16_t chksum);
-} PACK_STRUCT_STRUCT;
+};
 PACK_STRUCT_END
 #ifdef PACK_STRUCT_USE_INCLUDES
 #  include "arch/epstruct.h"
diff -uprN lwip_old/src/include/lwip/sockets.h lwip/src/include/lwip/sockets.h
--- lwip_old/src/include/lwip/sockets.h	2021-11-10 19:25:04.000000000 +0800
+++ lwip/src/include/lwip/sockets.h	2024-01-22 10:34:37.278614135 +0800
@@ -66,45 +66,6 @@ typedef u8_t sa_family_t;
 typedef u16_t in_port_t;
 #endif
 
-#if LWIP_IPV4
-/* members are in network byte order */
-struct sockaddr_in {
-  u8_t            sin_len;
-  sa_family_t     sin_family;
-  in_port_t       sin_port;
-  struct in_addr  sin_addr;
-#define SIN_ZERO_LEN 8
-  char            sin_zero[SIN_ZERO_LEN];
-};
-#endif /* LWIP_IPV4 */
-
-#if LWIP_IPV6
-struct sockaddr_in6 {
-  u8_t            sin6_len;      /* length of this structure    */
-  sa_family_t     sin6_family;   /* AF_INET6                    */
-  in_port_t       sin6_port;     /* Transport layer port #      */
-  u32_t           sin6_flowinfo; /* IPv6 flow information       */
-  struct in6_addr sin6_addr;     /* IPv6 address                */
-  u32_t           sin6_scope_id; /* Set of interfaces for scope */
-};
-#endif /* LWIP_IPV6 */
-
-struct sockaddr {
-  u8_t        sa_len;
-  sa_family_t sa_family;
-  char        sa_data[14];
-};
-
-struct sockaddr_storage {
-  u8_t        s2_len;
-  sa_family_t ss_family;
-  char        s2_data1[2];
-  u32_t       s2_data2[3];
-#if LWIP_IPV6
-  u32_t       s2_data3[3];
-#endif /* LWIP_IPV6 */
-};
-
 /* If your port already typedef's socklen_t, define SOCKLEN_T_DEFINED
    to prevent this code from redefining it. */
 #if !defined(socklen_t) && !defined(SOCKLEN_T_DEFINED)
@@ -117,33 +78,6 @@ typedef u32_t socklen_t;
 #error "IOV_MAX larger than supported by LwIP"
 #endif /* IOV_MAX */
 
-#if !defined(iovec)
-struct iovec {
-  void  *iov_base;
-  size_t iov_len;
-};
-#endif
-
-struct msghdr {
-  void         *msg_name;
-  socklen_t     msg_namelen;
-  struct iovec *msg_iov;
-  int           msg_iovlen;
-  void         *msg_control;
-  socklen_t     msg_controllen;
-  int           msg_flags;
-};
-
-/* struct msghdr->msg_flags bit field values */
-#define MSG_TRUNC   0x04
-#define MSG_CTRUNC  0x08
-
-/* RFC 3542, Section 20: Ancillary Data */
-struct cmsghdr {
-  socklen_t  cmsg_len;   /* number of bytes, including header */
-  int        cmsg_level; /* originating protocol */
-  int        cmsg_type;  /* protocol-specific type */
-};
 /* Data section follows header and possible padding, typically referred to as
       unsigned char cmsg_data[]; */
 
@@ -152,242 +86,6 @@ size on 16-bit arch) so structures are n
 16-bit arch needs double word to ensure 32-bit alignment because socklen_t
 could be 32 bits. If we ever have cmsg data with a 64-bit variable, alignment
 will need to increase long long */
-#define ALIGN_H(size) (((size) + sizeof(long) - 1U) & ~(sizeof(long)-1U))
-#define ALIGN_D(size) ALIGN_H(size)
-
-#define CMSG_FIRSTHDR(mhdr) \
-          ((mhdr)->msg_controllen >= sizeof(struct cmsghdr) ? \
-           (struct cmsghdr *)(mhdr)->msg_control : \
-           (struct cmsghdr *)NULL)
-
-#define CMSG_NXTHDR(mhdr, cmsg) \
-        (((cmsg) == NULL) ? CMSG_FIRSTHDR(mhdr) : \
-         (((u8_t *)(cmsg) + ALIGN_H((cmsg)->cmsg_len) \
-                            + ALIGN_D(sizeof(struct cmsghdr)) > \
-           (u8_t *)((mhdr)->msg_control) + (mhdr)->msg_controllen) ? \
-          (struct cmsghdr *)NULL : \
-          (struct cmsghdr *)((void*)((u8_t *)(cmsg) + \
-                                      ALIGN_H((cmsg)->cmsg_len)))))
-
-#define CMSG_DATA(cmsg) ((void*)((u8_t *)(cmsg) + \
-                         ALIGN_D(sizeof(struct cmsghdr))))
-
-#define CMSG_SPACE(length) (ALIGN_D(sizeof(struct cmsghdr)) + \
-                            ALIGN_H(length))
-
-#define CMSG_LEN(length) (ALIGN_D(sizeof(struct cmsghdr)) + \
-                           length)
-
-/* Set socket options argument */
-#define IFNAMSIZ NETIF_NAMESIZE
-struct ifreq {
-  char ifr_name[IFNAMSIZ]; /* Interface name */
-};
-
-/* Socket protocol types (TCP/UDP/RAW) */
-#define SOCK_STREAM     1
-#define SOCK_DGRAM      2
-#define SOCK_RAW        3
-
-/*
- * Option flags per-socket. These must match the SOF_ flags in ip.h (checked in init.c)
- */
-#define SO_REUSEADDR   0x0004 /* Allow local address reuse */
-#define SO_KEEPALIVE   0x0008 /* keep connections alive */
-#define SO_BROADCAST   0x0020 /* permit to send and to receive broadcast messages (see IP_SOF_BROADCAST option) */
-
-
-/*
- * Additional options, not kept in so_options.
- */
-#define SO_DEBUG        0x0001 /* Unimplemented: turn on debugging info recording */
-#define SO_ACCEPTCONN   0x0002 /* socket has had listen() */
-#define SO_DONTROUTE    0x0010 /* Unimplemented: just use interface addresses */
-#define SO_USELOOPBACK  0x0040 /* Unimplemented: bypass hardware when possible */
-#define SO_LINGER       0x0080 /* linger on close if data present */
-#define SO_DONTLINGER   ((int)(~SO_LINGER))
-#define SO_OOBINLINE    0x0100 /* Unimplemented: leave received OOB data in line */
-#define SO_REUSEPORT    0x0200 /* Unimplemented: allow local address & port reuse */
-#define SO_SNDBUF       0x1001 /* Unimplemented: send buffer size */
-#define SO_RCVBUF       0x1002 /* receive buffer size */
-#define SO_SNDLOWAT     0x1003 /* Unimplemented: send low-water mark */
-#define SO_RCVLOWAT     0x1004 /* Unimplemented: receive low-water mark */
-#define SO_SNDTIMEO     0x1005 /* send timeout */
-#define SO_RCVTIMEO     0x1006 /* receive timeout */
-#define SO_ERROR        0x1007 /* get error status and clear */
-#define SO_TYPE         0x1008 /* get socket type */
-#define SO_CONTIMEO     0x1009 /* Unimplemented: connect timeout */
-#define SO_NO_CHECK     0x100a /* don't create UDP checksum */
-#define SO_BINDTODEVICE 0x100b /* bind to device */
-
-/*
- * Structure used for manipulating linger option.
- */
-struct linger {
-  int l_onoff;                /* option on/off */
-  int l_linger;               /* linger time in seconds */
-};
-
-/*
- * Level number for (get/set)sockopt() to apply to socket itself.
- */
-#define  SOL_SOCKET  0xfff    /* options for socket level */
-
-
-#define AF_UNSPEC       0
-#define AF_INET         2
-#if LWIP_IPV6
-#define AF_INET6        10
-#else /* LWIP_IPV6 */
-#define AF_INET6        AF_UNSPEC
-#endif /* LWIP_IPV6 */
-#define PF_INET         AF_INET
-#define PF_INET6        AF_INET6
-#define PF_UNSPEC       AF_UNSPEC
-
-#define IPPROTO_IP      0
-#define IPPROTO_ICMP    1
-#define IPPROTO_TCP     6
-#define IPPROTO_UDP     17
-#if LWIP_IPV6
-#define IPPROTO_IPV6    41
-#define IPPROTO_ICMPV6  58
-#endif /* LWIP_IPV6 */
-#define IPPROTO_UDPLITE 136
-#define IPPROTO_RAW     255
-
-/* Flags we can use with send and recv. */
-#define MSG_PEEK       0x01    /* Peeks at an incoming message */
-#define MSG_WAITALL    0x02    /* Unimplemented: Requests that the function block until the full amount of data requested can be returned */
-#define MSG_OOB        0x04    /* Unimplemented: Requests out-of-band data. The significance and semantics of out-of-band data are protocol-specific */
-#define MSG_DONTWAIT   0x08    /* Nonblocking i/o for this operation only */
-#define MSG_MORE       0x10    /* Sender will send more */
-#define MSG_NOSIGNAL   0x20    /* Uninmplemented: Requests not to send the SIGPIPE signal if an attempt to send is made on a stream-oriented socket that is no longer connected. */
-
-
-/*
- * Options for level IPPROTO_IP
- */
-#define IP_TOS             1
-#define IP_TTL             2
-#define IP_PKTINFO         8
-
-#if LWIP_TCP
-/*
- * Options for level IPPROTO_TCP
- */
-#define TCP_NODELAY    0x01    /* don't delay send to coalesce packets */
-#define TCP_KEEPALIVE  0x02    /* send KEEPALIVE probes when idle for pcb->keep_idle milliseconds */
-#define TCP_KEEPIDLE   0x03    /* set pcb->keep_idle  - Same as TCP_KEEPALIVE, but use seconds for get/setsockopt */
-#define TCP_KEEPINTVL  0x04    /* set pcb->keep_intvl - Use seconds for get/setsockopt */
-#define TCP_KEEPCNT    0x05    /* set pcb->keep_cnt   - Use number of probes sent for get/setsockopt */
-#endif /* LWIP_TCP */
-
-#if LWIP_IPV6
-/*
- * Options for level IPPROTO_IPV6
- */
-#define IPV6_CHECKSUM       7  /* RFC3542: calculate and insert the ICMPv6 checksum for raw sockets. */
-#define IPV6_V6ONLY         27 /* RFC3493: boolean control to restrict AF_INET6 sockets to IPv6 communications only. */
-#endif /* LWIP_IPV6 */
-
-#if LWIP_UDP && LWIP_UDPLITE
-/*
- * Options for level IPPROTO_UDPLITE
- */
-#define UDPLITE_SEND_CSCOV 0x01 /* sender checksum coverage */
-#define UDPLITE_RECV_CSCOV 0x02 /* minimal receiver checksum coverage */
-#endif /* LWIP_UDP && LWIP_UDPLITE*/
-
-
-#if LWIP_MULTICAST_TX_OPTIONS
-/*
- * Options and types for UDP multicast traffic handling
- */
-#define IP_MULTICAST_TTL   5
-#define IP_MULTICAST_IF    6
-#define IP_MULTICAST_LOOP  7
-#endif /* LWIP_MULTICAST_TX_OPTIONS */
-
-#if LWIP_IGMP
-/*
- * Options and types related to multicast membership
- */
-#define IP_ADD_MEMBERSHIP  3
-#define IP_DROP_MEMBERSHIP 4
-
-typedef struct ip_mreq {
-    struct in_addr imr_multiaddr; /* IP multicast address of group */
-    struct in_addr imr_interface; /* local IP address of interface */
-} ip_mreq;
-#endif /* LWIP_IGMP */
-
-#if LWIP_IPV4
-struct in_pktinfo {
-  unsigned int   ipi_ifindex;  /* Interface index */
-  struct in_addr ipi_addr;     /* Destination (from header) address */
-};
-#endif /* LWIP_IPV4 */
-
-#if LWIP_IPV6_MLD
-/*
- * Options and types related to IPv6 multicast membership
- */
-#define IPV6_JOIN_GROUP      12
-#define IPV6_ADD_MEMBERSHIP  IPV6_JOIN_GROUP
-#define IPV6_LEAVE_GROUP     13
-#define IPV6_DROP_MEMBERSHIP IPV6_LEAVE_GROUP
-
-typedef struct ipv6_mreq {
-  struct in6_addr ipv6mr_multiaddr; /*  IPv6 multicast addr */
-  unsigned int    ipv6mr_interface; /*  interface index, or 0 */
-} ipv6_mreq;
-#endif /* LWIP_IPV6_MLD */
-
-/*
- * The Type of Service provides an indication of the abstract
- * parameters of the quality of service desired.  These parameters are
- * to be used to guide the selection of the actual service parameters
- * when transmitting a datagram through a particular network.  Several
- * networks offer service precedence, which somehow treats high
- * precedence traffic as more important than other traffic (generally
- * by accepting only traffic above a certain precedence at time of high
- * load).  The major choice is a three way tradeoff between low-delay,
- * high-reliability, and high-throughput.
- * The use of the Delay, Throughput, and Reliability indications may
- * increase the cost (in some sense) of the service.  In many networks
- * better performance for one of these parameters is coupled with worse
- * performance on another.  Except for very unusual cases at most two
- * of these three indications should be set.
- */
-#define IPTOS_TOS_MASK          0x1E
-#define IPTOS_TOS(tos)          ((tos) & IPTOS_TOS_MASK)
-#define IPTOS_LOWDELAY          0x10
-#define IPTOS_THROUGHPUT        0x08
-#define IPTOS_RELIABILITY       0x04
-#define IPTOS_LOWCOST           0x02
-#define IPTOS_MINCOST           IPTOS_LOWCOST
-
-/*
- * The Network Control precedence designation is intended to be used
- * within a network only.  The actual use and control of that
- * designation is up to each network. The Internetwork Control
- * designation is intended for use by gateway control originators only.
- * If the actual use of these precedence designations is of concern to
- * a particular network, it is the responsibility of that network to
- * control the access to, and use of, those precedence designations.
- */
-#define IPTOS_PREC_MASK                 0xe0
-#define IPTOS_PREC(tos)                ((tos) & IPTOS_PREC_MASK)
-#define IPTOS_PREC_NETCONTROL           0xe0
-#define IPTOS_PREC_INTERNETCONTROL      0xc0
-#define IPTOS_PREC_CRITIC_ECP           0xa0
-#define IPTOS_PREC_FLASHOVERRIDE        0x80
-#define IPTOS_PREC_FLASH                0x60
-#define IPTOS_PREC_IMMEDIATE            0x40
-#define IPTOS_PREC_PRIORITY             0x20
-#define IPTOS_PREC_ROUTINE              0x00
-
 
 /*
  * Commands for ioctlsocket(),  taken from the BSD file fcntl.h.
@@ -427,7 +125,6 @@ typedef struct ipv6_mreq {
 #define SIOCGHIWAT  _IOR('s',  1, unsigned long)  /* get high watermark */
 #define SIOCSLOWAT  _IOW('s',  2, unsigned long)  /* set low watermark */
 #define SIOCGLOWAT  _IOR('s',  3, unsigned long)  /* get low watermark */
-#define SIOCATMARK  _IOR('s',  7, unsigned long)  /* at oob mark? */
 #endif
 
 /* commands for fnctl */
diff -uprN lwip_old/src/include/netif/ieee802154.h lwip/src/include/netif/ieee802154.h
--- lwip_old/src/include/netif/ieee802154.h	2021-11-10 19:25:04.000000000 +0800
+++ lwip/src/include/netif/ieee802154.h	2024-01-22 10:34:37.278614135 +0800
@@ -51,7 +51,7 @@ PACK_STRUCT_BEGIN
  * This shows the full featured header, mainly for documentation.
  * Some fields are omitted or shortened to achieve frame compression.
  */
-struct ieee_802154_hdr {
+PACK_STRUCT_STRUCT struct ieee_802154_hdr {
   /** See IEEE_802154_FC_* defines */
   PACK_STRUCT_FIELD(u16_t frame_control);
   /** Sequence number is omitted if IEEE_802154_FC_SEQNO_SUPPR is set in frame_control */
@@ -66,7 +66,7 @@ struct ieee_802154_hdr {
   /** Source Address is omitted if Source Addressing Mode is 0 */
   PACK_STRUCT_FLD_8(u8_t source_address[8]);
   /* The rest is variable */
-} PACK_STRUCT_STRUCT;
+};
 PACK_STRUCT_END
 #ifdef PACK_STRUCT_USE_INCLUDES
 #  include "arch/epstruct.h"
diff -uprN lwip_old/src/include/netif/ppp/pppoe.h lwip/src/include/netif/ppp/pppoe.h
--- lwip_old/src/include/netif/ppp/pppoe.h	2021-11-10 19:25:04.000000000 +0800
+++ lwip/src/include/netif/ppp/pppoe.h	2024-01-22 10:34:37.278614135 +0800
@@ -84,12 +84,12 @@ extern "C" {
 #  include "arch/bpstruct.h"
 #endif
 PACK_STRUCT_BEGIN
-struct pppoehdr {
+PACK_STRUCT_STRUCT struct pppoehdr {
   PACK_STRUCT_FLD_8(u8_t vertype);
   PACK_STRUCT_FLD_8(u8_t code);
   PACK_STRUCT_FIELD(u16_t session);
   PACK_STRUCT_FIELD(u16_t plen);
-} PACK_STRUCT_STRUCT;
+};
 PACK_STRUCT_END
 #ifdef PACK_STRUCT_USE_INCLUDES
 #  include "arch/epstruct.h"
@@ -99,10 +99,10 @@ PACK_STRUCT_END
 #  include "arch/bpstruct.h"
 #endif
 PACK_STRUCT_BEGIN
-struct pppoetag {
+PACK_STRUCT_STRUCT struct pppoetag {
   PACK_STRUCT_FIELD(u16_t tag);
   PACK_STRUCT_FIELD(u16_t len);
-} PACK_STRUCT_STRUCT;
+};
 PACK_STRUCT_END
 #ifdef PACK_STRUCT_USE_INCLUDES
 #  include "arch/epstruct.h"
diff -uprN lwip_old/src/netif/ppp/pppos.c lwip/src/netif/ppp/pppos.c
--- lwip_old/src/netif/ppp/pppos.c	2021-11-10 19:25:04.000000000 +0800
+++ lwip/src/netif/ppp/pppos.c	2024-01-22 10:34:37.278614135 +0800
@@ -459,9 +459,9 @@ err_t pppos_input_sys(struct pbuf *p, st
 #  include "arch/bpstruct.h"
 #endif
 PACK_STRUCT_BEGIN
-struct pppos_input_header {
+PACK_STRUCT_STRUCT struct pppos_input_header {
   PACK_STRUCT_FIELD(ppp_pcb *ppp);
-} PACK_STRUCT_STRUCT;
+};
 PACK_STRUCT_END
 #ifdef PACK_STRUCT_USE_INCLUDES
 #  include "arch/epstruct.h"
diff -uprN lwip_old/src/netif/ppp/vj.c lwip/src/netif/ppp/vj.c
--- lwip_old/src/netif/ppp/vj.c	2021-11-10 19:25:04.000000000 +0800
+++ lwip/src/netif/ppp/vj.c	2024-01-22 10:34:37.279614107 +0800
@@ -129,9 +129,9 @@ vj_compress_init(struct vjcompress *comp
 #  include "arch/bpstruct.h"
 #endif
 PACK_STRUCT_BEGIN
-struct vj_u32_t {
+PACK_STRUCT_STRUCT struct vj_u32_t {
   PACK_STRUCT_FIELD(u32_t v);
-} PACK_STRUCT_STRUCT;
+};
 PACK_STRUCT_END
 #ifdef PACK_STRUCT_USE_INCLUDES
 #  include "arch/epstruct.h"
@@ -141,9 +141,9 @@ PACK_STRUCT_END
 #  include "arch/bpstruct.h"
 #endif
 PACK_STRUCT_BEGIN
-struct vj_u16_t {
+PACK_STRUCT_STRUCT struct vj_u16_t {
   PACK_STRUCT_FIELD(u16_t v);
-} PACK_STRUCT_STRUCT;
+};
 PACK_STRUCT_END
 #ifdef PACK_STRUCT_USE_INCLUDES
 #  include "arch/epstruct.h"
diff -uprN lwip_old/src/netif/zepif.c lwip/src/netif/zepif.c
--- lwip_old/src/netif/zepif.c	2021-11-10 19:25:04.000000000 +0800
+++ lwip/src/netif/zepif.c	2024-01-22 10:34:37.279614107 +0800
@@ -67,7 +67,7 @@
 #  include "arch/bpstruct.h"
 #endif
 PACK_STRUCT_BEGIN
-struct zep_hdr {
+PACK_STRUCT_STRUCT struct zep_hdr {
   PACK_STRUCT_FLD_8(u8_t prot_id[2]);
   PACK_STRUCT_FLD_8(u8_t prot_version);
   PACK_STRUCT_FLD_8(u8_t type);
@@ -79,7 +79,7 @@ struct zep_hdr {
   PACK_STRUCT_FIELD(u32_t seq_num);
   PACK_STRUCT_FLD_8(u8_t unknown_2[10]);
   PACK_STRUCT_FLD_8(u8_t len);
-} PACK_STRUCT_STRUCT;
+};
 PACK_STRUCT_END
 #ifdef PACK_STRUCT_USE_INCLUDES
 #  include "arch/epstruct.h"
